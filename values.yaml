imagePullSecrets: []

clusterDomain: cluster.local

general:
  smtp:
    SMTP_HOST: your.smtp.server
    SMTP_PORT: 123
    SMTP_SENDER_ADDRESS: voltaserve-noreply@your.smtp.host
    SMTP_SENDER_NAME: Voltaserve
    SMTP_SECURE: false
  # Those values need to be filled if minio.enabled is false
  s3:
    S3_URL: your.minio.instance
    S3_REGION: us-east-1
    S3_SECURE: false
  # Those values need to be filled if cockroachdb.enabled is false
  database:
    POSTGRES_URL: postgresql://voltaserve@your.database.host:26257/voltaserve
    MIGRATIONS_DATABASE_URL: postgresql://root@your.database.host:26257/postgres
  # Those values need to be filled if redis.enabled is false
  redis:
    REDIS_ADDRESS: your.redis.instance
    REDIS_DB: 0
  # Those values need to be filled if meilisearch.enabled is false
  search:
    SEARCH_URL: your.meilisearch.instance
  # Those values must be filled if You don't use ingress from our chart (keep in mind that You need two ingresses - ui and webdav)
  endpoint:
    PUBLIC_UI_URL: your.public.ui.url
  jwt:
    TOKEN_ACCESS_TOKEN_LIFETIME: 86400
    TOKEN_REFRESH_TOKEN_LIFETIME: 2592000
  limits:
    #This one is consumed by conversion microservice, and it determines if we want to download additional fonts during startup
    ENABLE_INSTALLER: true
    LIMITS_FILE_UPLOAD_MB: 10000
    LIMITS_FILE_PROCESSING_MB: video:10000,*:1000
    DEFAULTS_WORKSPACE_STORAGE_CAPACITY_MB: 100000
    LIMITS_EXTERNAL_COMMAND_TIMEOUT_SECONDS: 900
    LIMITS_IMAGE_PREVIEW_MAX_WIDTH: 512
    LIMITS_IMAGE_PREVIEW_MAX_HEIGHT: 512
    LIMITS_MULTIPART_BODY_LENGTH_LIMIT_MB: 5000
  #Those option gives possibility to manage password requirements
  passwordRequirements:
    PASSWORD_MIN_LENGTH: 8
    PASSWORD_MIN_LOWERCASE: 1
    PASSWORD_MIN_UPPERCASE: 1
    PASSWORD_MIN_NUMBERS: 1
    PASSWORD_MIN_SYMBOLS: 1
  # This option spreads given env vars over all existing configmaps
  sharedEnvs: {}

  secrets:
    jwt:
      SECURITY_JWT_SIGNING_KEY: null
    api:
      SECURITY_API_KEY: null
    s3:
      S3_ACCESS_KEY: voltaserve
      S3_SECRET_KEY: voltaserve
    smtp:
      SMTP_USERNAME: smtp username
      SMTP_PASSWORD: smtp password
    # This option spreads given secret over all existing secrets
    sharedSecrets: {}

globals:
  podAnnotations:
    {}
  serviceAnnotations:
    {}
  podLabels:
    {}
  nodeSelectors:
    {}
  ingressAnnotations:
    {}


api:
  existingSecret: null
  image:
    repository: null
    tag: null
  service:
    port: 8080
    type: ClusterIP
    annotations:
      {}
  envs:
    {}
  deployment:
    imagePullPolicy:
    replicaCount: 1
    podAnnotations:
      {}
    podLabels:
      {}
    livenessProbePath: null
    readinessProbePath: null
    security:
      securityContext:
        {}
      podSecurityContext:
        {}
    resources:
      {}
    volumeMounts:
      {}
    volumes:
      {}
    nodeSelector:
      {}
    affinity:
      {}
    tolerations:
      {}


conversion:
  existingSecret: null
  image:
    repository: null
    tag: null
  service:
    port: 8083
    type: ClusterIP
    annotations:
      {}
  envs:
    {}
  deployment:
    imagePullPolicy:
    replicaCount: 1
    podAnnotations:
      {}
    podLabels:
      {}
    livenessProbePath: null
    readinessProbePath: null
    security:
      securityContext:
        {}
      podSecurityContext:
        {}
    resources:
      {}
    volumeMounts:
      {}
    volumes:
      {}
    nodeSelector:
      {}
    affinity:
      {}
    tolerations:
      {}

idp:
  existingSecret: null
  image:
    repository: null
    tag: null
  service:
    port: 8081
    type: ClusterIP
    annotations:
      {}
  envs:
    {}
  deployment:
    imagePullPolicy:
    replicaCount: 1
    podAnnotations:
      {}
    podLabels:
      {}
    livenessProbePath: null
    readinessProbePath: null
    security:
      securityContext:
        {}
      podSecurityContext:
        {}
    resources:
      {}
    volumeMounts:
      {}
    volumes:
      {}
    nodeSelector:
      {}
    affinity:
      {}
    tolerations:
      {}


language:
  image:
    repository: null
    tag: null
  service:
    port: 8084
    type: ClusterIP
    annotations:
      {}
  deployment:
    imagePullPolicy:
    replicaCount: 1
    podAnnotations:
      {}
    podLabels:
      {}
    livenessProbePath: null
    readinessProbePath: null
    security:
      securityContext:
        {}
      podSecurityContext:
        {}
    resources:
      {}
    volumeMounts:
      {}
    volumes:
      {}
    nodeSelector:
      {}
    affinity:
      {}
    tolerations:
      {}

mosaic:
  existingSecret: null
  image:
    repository: null
    tag: null
  service:
    port: 8085
    type: ClusterIP
    annotations:
      {}
  envs:
    {}
  deployment:
    imagePullPolicy:
    replicaCount: 1
    podAnnotations:
      {}
    podLabels:
      {}
    livenessProbePath: null
    readinessProbePath: null
    security:
      securityContext:
        {}
      podSecurityContext:
        {}
    resources:
      {}
    volumeMounts:
      {}
    volumes:
      {}
    nodeSelector:
      {}
    affinity:
      {}
    tolerations:
      {}

ui:
  existingSecret: null
  ingress:
    enabled: true
    host: ui.public.url
    annotations:
      {}
    className: nginx-public
    tls:
      []
  image:
    repository: null
    tag: null
  service:
    port: 3000
    type: ClusterIP
    annotations:
      {}
  envs:
    {}
  deployment:
    imagePullPolicy:
    replicaCount: 1
    podAnnotations:
      {}
    podLabels:
      {}
    livenessProbePath: null
    readinessProbePath: null
    security:
      securityContext:
        {}
      podSecurityContext:
        {}
    resources:
      {}
    volumeMounts:
      {}
    volumes:
      {}
    nodeSelector:
      {}
    affinity:
      {}
    tolerations:
      {}

webdav:
  existingSecret: null
  ingress:
    enabled: true
    annotations:
      {}
    host: webdav.public.url
    className: nginx-public
    tls:
      []
  image:
    repository: null
    tag: null
  service:
    port: 8082
    type: ClusterIP
    annotations:
      {}
  envs:
    {}
  deployment:
    imagePullPolicy:
    replicaCount: 1
    podAnnotations:
      {}
    podLabels:
      {}
    livenessProbePath: null
    readinessProbePath: null
    security:
      securityContext:
        {}
      podSecurityContext:
        {}
    resources:
      {}
    volumeMounts:
      {}
    volumes:
      {}
    nodeSelector:
      {}
    affinity:
      {}
    tolerations:
      {}

redis:
  enabled: false

minio:
  enabled: false

cockroachdb:
  enabled: false

meilisearch:
  enabled: false